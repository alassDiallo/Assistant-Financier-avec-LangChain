# -------------------------------------------
# INSTALLATIONS N√âCESSAIRES
# -------------------------------------------
# Installez les biblioth√®ques suivantes avant d'ex√©cuter ce fichier :
#
# pip install streamlit langchain-openai langchain-community pypdf openai
#
# Lancer l'application avec :
# streamlit run nom_du_fichier.py
# -------------------------------------------

import os
import streamlit as st
from langchain_community.document_loaders import PyPDFLoader
from langchain_core.vectorstores import InMemoryVectorStore
from langchain_openai import OpenAIEmbeddings

# Configuration de la cl√© API OpenAI
os.environ["OPENAI_API_KEY"] = "VotreCl√©APIOpenAI"

# Titre de l'application
st.title("Assistant Analyste Financier Intelligent")
st.subheader("Analysez vos rapports financiers avec un assistant IA")

# T√©l√©chargement du fichier PDF
uploaded_file = st.file_uploader("Chargez un rapport financier au format PDF", type="pdf")

if uploaded_file:
    # Enregistrer le fichier localement
    with open("uploaded_file.pdf", "wb") as f:
        f.write(uploaded_file.read())
    
    # Charger le fichier PDF avec PyPDFLoader
    st.write("üìÑ Chargement du fichier...")
    loader = PyPDFLoader("uploaded_file.pdf")
    
    # Charger les pages de mani√®re asynchrone
    pages = []
    for page in loader.lazy_load():
        pages.append(page)
    
    # V√©rification que le document contient des pages
    if not pages:
        st.warning("‚ö†Ô∏è Le fichier PDF est vide ou n'a pas pu √™tre charg√©.")
    else:
        # Afficher les m√©tadonn√©es et les 100 premiers caract√®res de la premi√®re page
        st.subheader("Aper√ßu de la premi√®re page")
        st.write(f"M√©tadon n√©es : {pages[0].metadata}")
        st.write(f"Contenu (100 premiers caract√®res) : {pages[0].page_content[:100]}")

        # Cr√©er un index vectoriel pour la recherche
        vector_store = InMemoryVectorStore.from_documents(pages, OpenAIEmbeddings())

        # Questions financi√®res par d√©faut
        st.subheader("Questions pr√©d√©finies")
        default_questions = [
            "Quel est le chiffre d'affaires total de cette ann√©e ?",
            "Quels sont les segments les plus performants ?",
            "Quelle est l'√©volution des b√©n√©fices par rapport √† l'ann√©e pr√©c√©dente ?",
            "Quels sont les principaux co√ªts op√©rationnels ?",
            "Quel est le ratio de solvabilit√© (CET1) ?",
        ]
        selected_question = st.selectbox("Choisissez une question pr√©d√©finie :", default_questions)

        # Bouton pour les questions pr√©d√©finies
        if st.button("Obtenir une r√©ponse pour la question pr√©d√©finie"):
            st.write("üîç Recherche en cours pour la question pr√©d√©finie...")
            docs = vector_store.similarity_search(selected_question, k=2)
            if docs:
                for doc in docs:
                    st.write(f'Page {doc.metadata["page"]}: {doc.page_content[:300]}...')
            else:
                st.warning("‚ö†Ô∏è Aucune r√©ponse trouv√©e dans le document.")

        # Option pour poser une question personnalis√©e
        st.subheader("Posez une question sp√©cifique")
        user_question = st.text_input("Entrez votre propre question :", "")

        # Bouton pour les questions sp√©cifiques
        if st.button("Obtenir une r√©ponse pour la question sp√©cifique"):
            if user_question.strip():
                st.write("üîç Recherche en cours pour la question sp√©cifique...")
                docs = vector_store.similarity_search(user_question, k=2)
                if docs:
                    for doc in docs:
                        st.write(f'Page {doc.metadata["page"]}: {doc.page_content[:300]}...')
                else:
                    st.warning("‚ö†Ô∏è Aucune r√©ponse trouv√©e dans le document.")
            else:
                st.warning("‚ö†Ô∏è Veuillez entrer une question sp√©cifique avant de cliquer.")
